/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author Windows_94
 */
public class Splash extends javax.swing.JFrame
{

    /**
     * Creates new form splash2
     */
    public Splash()
    {
        setUndecorated(true); //Hides the frame containing minimize, maximise and exit buttons
        initComponents();
        timerBar.setStringPainted(true); //Displays progress bars filed % 
        t1.start(); //start timer
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        imagePanel = new Classes.ImagePanel();
        timerBar = new javax.swing.JProgressBar();
        loadingInfoLbl = new javax.swing.JLabel();
        loadingInfoMessageLbl = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RSA App Loading...");
        setResizable(false);

        timerBar.setMaximum(7000);
        timerBar.setBorder(null);

        loadingInfoLbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        loadingInfoLbl.setForeground(new java.awt.Color(255, 255, 255));
        loadingInfoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingInfoLbl.setText(".");

        loadingInfoMessageLbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        loadingInfoMessageLbl.setForeground(new java.awt.Color(255, 255, 255));
        loadingInfoMessageLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadingInfoMessageLbl.setText(".");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timerBar, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addComponent(loadingInfoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadingInfoMessageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadingInfoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadingInfoMessageLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 515, Short.MAX_VALUE)
                .addComponent(timerBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Splash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Splash().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Classes.ImagePanel imagePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel loadingInfoLbl;
    private javax.swing.JLabel loadingInfoMessageLbl;
    private javax.swing.JProgressBar timerBar;
    // End of variables declaration//GEN-END:variables

    Timer t1 = new Timer(10, new ActionListener() //Fire ActionEvent every 0.01 seconds (smoother progress bar incrementation)
    {
        int s = 0; //seconds

        @Override
        public void actionPerformed(ActionEvent e)
        {
            switch(s) //Animate "Loading" splash screen text
            {
                case 0:
                {
                    loadingInfoLbl.setText("Loading RSA Application");
                    loadingInfoMessageLbl.setText(randomLine()); //get random line from text file
                    break;
                }
                case 1000:{loadingInfoLbl.setText(loadingInfoLbl.getText()+".");break;} //Animate "Loading RSA Application" using .
                case 2000:
                {
                    loadingInfoLbl.setText(loadingInfoLbl.getText()+".");
                    loadingInfoMessageLbl.setText(randomLine());
                    break;
                }
                case 3000:{loadingInfoLbl.setText(loadingInfoLbl.getText()+".");break;}
                case 4000:
                {
                    loadingInfoLbl.setText("Loading RSA Application");
                    loadingInfoMessageLbl.setText(randomLine());
                    break;
                }
                case 5000:{loadingInfoLbl.setText(loadingInfoLbl.getText()+".");break;}
                case 6000:
                {
                    loadingInfoLbl.setText(loadingInfoLbl.getText()+".");
                    loadingInfoMessageLbl.setText(randomLine());
                    break;
                }
                case 7000:{loadingInfoLbl.setText(loadingInfoLbl.getText()+".");break;}
                default:{break;}
            }
            if (s != timerBar.getMaximum()) //increment progressBar and seconds variable
            {
                timerBar.setValue(s);
                s+=10;
            }
            else //Stop timer, close form and open Main Menu form
            {
                t1.stop(); //stop timer
                dispose(); //close window
                new MainMenu().setVisible(true); //open MainMenu form
            }
        }
    });
    
    public static String randomLine() //Return a random line of text from the HashMap
    {
        Map<String,Integer> map = new HashMap<String,Integer>();
            try
            {
                String s = choose(new File("src/Resources/loadingMessages.txt")); //Line read from File is passed to String variable s
                if(!map.containsKey(s)) //If variable s element is not mapped
                    map.put(s, 0); //map it to index 0
                map.put(s, map.get(s)+1); //otherwise put variable s element into next map key
                return s; //Return the string to the splash screen
            } catch (FileNotFoundException ex){Logger.getLogger(Splash.class.getName()).log(Level.SEVERE, null, ex);}
        return null;
    }
    
    public static String choose(File f) throws FileNotFoundException //Read random lines of text from file
    {
        String result = null;
        Random rand = new Random();
        int n = 0;
        for (Scanner sc = new Scanner(f); sc.hasNext();) //Whilst there is a next line of text
        {
            ++n; //preincrementation
            String line = sc.nextLine();
            if (rand.nextInt(n) == 0) //if randomly generated integer is between n and 0
            {
                result = line; //return == line read from Scanner
            }
        }
        return result; //return line of text
    }
}
